/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package JFrame;

import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 2ndyrGroupB
 */
public class payOrder extends javax.swing.JFrame {

    /**
     * Creates new form payOrder
     */
    String uname;

    public payOrder() {
        initComponents();
        this.setTitle("Pay Order");
        uname = "Patchan";
    }

    public payOrder(String username) {
        initComponents();
        this.setTitle("Pay Order");
        uname = "Patchan";

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        ordersTable = new javax.swing.JTable();
        orderFieldLabel = new javax.swing.JLabel();
        orderField = new javax.swing.JTextField();
        payButton = new javax.swing.JButton();
        canelButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        viewTable = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ordersTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        ordersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "User ID", "Medicine ID", "Ordered Name", "Quantity", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(ordersTable);

        orderFieldLabel.setFont(new java.awt.Font("Serif", 1, 24)); // NOI18N
        orderFieldLabel.setText("Enter Order ID:");

        orderField.setFont(new java.awt.Font("Serif", 1, 24)); // NOI18N
        orderField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        payButton.setFont(new java.awt.Font("Serif", 1, 24)); // NOI18N
        payButton.setText("Pay Order");
        payButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                payButtonMouseClicked(evt);
            }
        });
        payButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payButtonActionPerformed(evt);
            }
        });

        canelButton.setFont(new java.awt.Font("Serif", 1, 24)); // NOI18N
        canelButton.setText("Cancel");
        canelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                canelButtonMouseClicked(evt);
            }
        });
        canelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                canelButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Serif", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Pay Order");

        viewTable.setFont(new java.awt.Font("Serif", 1, 24)); // NOI18N
        viewTable.setText("View");
        viewTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewTableMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addGap(23, 23, 23))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(216, 216, 216)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(viewTable, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(50, 50, 50)
                                .addComponent(payButton, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addComponent(canelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(orderFieldLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(orderField, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)))))
                .addGap(17, 17, 17))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(orderFieldLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(orderField))
                .addGap(83, 83, 83)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(payButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(canelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewTable, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(73, 73, 73))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void canelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_canelButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_canelButtonActionPerformed

    private void canelButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canelButtonMouseClicked
        this.dispose();
        new customerView(uname).setVisible(true);
    }//GEN-LAST:event_canelButtonMouseClicked

    private void payButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_payButtonActionPerformed

    private void viewTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewTableMouseClicked
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/jframe", "root", "");
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM `orders`");
            DefaultTableModel tm = (DefaultTableModel) ordersTable.getModel();
            tm.setRowCount(0);

            while (rs.next()) {
                if (uname.equals("Admin")) {
                    System.out.println("Basa ikaw!");
                    Object table[] = {rs.getInt("id"), rs.getString("username"), rs.getInt("med_id"), rs.getString("ordered_name"), rs.getInt("quantity"), rs.getDouble("amount")};
                    tm.addRow(table);
                } else {
                    ResultSet rs1 = stmt.executeQuery("SELECT * FROM `orders` WHERE username='" + uname + "'");
                    DefaultTableModel tm1 = (DefaultTableModel) ordersTable.getModel();
                    tm1.setRowCount(0);
                    while (rs1.next()) {
                        Object table[] = {rs1.getInt("id"), rs1.getString("username"), rs1.getInt("med_id"), rs1.getString("ordered_name"), rs1.getInt("quantity"), rs1.getDouble("amount")};
                        tm1.addRow(table);
                    }
                    break;
                }
            }
            con.close();
        } catch (ClassNotFoundException | SQLException e) {
            JOptionPane.showMessageDialog(null, "Error connecting to database!");
        }
    }//GEN-LAST:event_viewTableMouseClicked


    private void payButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_payButtonMouseClicked
        String orderId = orderField.getText();
        int order = Integer.parseInt(orderId);
        try {

            Class.forName("com.mysql.jdbc.Driver");

            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/jframe", "root", "");

            Statement stmt = con.createStatement();

            ResultSet rs = stmt.executeQuery("SELECT * FROM `orders` WHERE id=" + order);

            if (rs.next()) {
                System.out.println("basa");
                double amount = rs.getDouble("amount");
                int qty = rs.getInt("quantity");
                String orderedname = rs.getString("ordered_name");
                System.out.println("nag run sa orders");

                ResultSet rs1 = stmt.executeQuery("SELECT * FROM `users` WHERE username='" + uname + "'");
                if (rs1.next()) {
                    double money = rs1.getDouble("money");
                    double moneyLeftAdult = money - amount;
                    int age = rs1.getInt("age");
                    
                    double moneyLeftSenior = ((money - amount) * .80);
                    ResultSet rs2 = stmt.executeQuery("SELECT * FROM `medicine` WHERE brandname='" + orderedname + "'");

                    if (rs2.next()) {
                        int qty1 = rs2.getInt("stock");
                        int left = qty1 - qty;
                        
                        String name = rs2.getString("brandname");
                        System.out.println("nag run na siya sa medicine");
                        if (amount > money) { // If amount is greater than the user's money
                            JOptionPane.showMessageDialog(rootPane, "Insufficient balance!");
                        } else if (amount == money) { // If ordered amount is equal to the money of the person
                            
//                                    String sql = "UPDATE `users` SET `money`=" + money + " WHERE username='" + uname + "'";
//                                    String sql1 = "UPDATE `medicine` SET `stock`="+left+" WHERE brandname='" + rs.getString("ordered_name") + "'";

                            if (qty > qty1) { // If the quantity ordered is greater than the stock
                                JOptionPane.showMessageDialog(rootPane, "Currently can't process order because insufficient of stock! We'll update it later!");

                            } else if (qty == qty1) { // If stock of the medicine is equal to ordered quantity
                                // Updating data in the tables here
                                if (age >= 60) {
                                    
                                    String sql3 = "DELETE FROM `medicine` WHERE brandname='" + orderedname + "'";
                                    String sql4 = "UPDATE `users` SET `money`=" + moneyLeftSenior + " WHERE username='" + uname + "'";
                                    String sql5 = "DELETE FROM `orders` WHERE id=" + order;

                                    stmt.addBatch(sql3);
                                    stmt.addBatch(sql4);
                                    stmt.addBatch(sql5);
                                    stmt.executeBatch();

                                    JOptionPane.showMessageDialog(null, "Order is now paid!");
                                    this.dispose();
                                    new customerView(uname).setVisible(true);
                                } else {

                                    String sql3 = "DELETE FROM `medicine` WHERE brandname='" + orderedname + "'";
                                    String sql4 = "UPDATE `users` SET `money`=" + moneyLeftAdult + " WHERE username='" + uname + "'";
                                    String sql5 = "DELETE FROM `orders` WHERE id=" + order;

                                    stmt.addBatch(sql3);
                                    stmt.addBatch(sql4);
                                    stmt.addBatch(sql5);
                                    stmt.executeBatch();
                                    JOptionPane.showMessageDialog(rootPane, "Order is now paid!");
                                    this.dispose();
                                    new customerView(uname).setVisible(true);
                                }
                            } else { // If quantity ordered is lesser than the stock

                                // Updating data in the tables here
                                
                                if (left == 0) {
                                    if (age >= 60) {
                                        String sql3 = "DELETE FROM `medicine` WHERE brandname='" + orderedname + "'";
                                        String sql4 = "UPDATE `users` SET `money`=" + moneyLeftSenior + " WHERE username='" + uname + "'";
                                        String sql5 = "DELETE FROM `orders` WHERE id=" + order;
                                        stmt.addBatch(sql3);
                                        stmt.addBatch(sql4);
                                        stmt.addBatch(sql5);
                                        stmt.executeBatch();

                                        JOptionPane.showMessageDialog(rootPane, "Paid Successfully!");
                                        this.dispose();
                                        new customerView(uname).setVisible(true);
                                    } else {
                                        String sql3 = "DELETE FROM `medicine` WHERE brandname='" + orderedname + "'";
                                        String sql4 = "UPDATE `users` SET `money`=" + moneyLeftAdult + " WHERE username='" + uname + "'";
                                        String sql5 = "DELETE FROM `orders` WHERE id=" + order;
                                        stmt.addBatch(sql3);
                                        stmt.addBatch(sql4);
                                        stmt.addBatch(sql5);
                                        stmt.executeBatch();
                                        this.dispose();
                                        new customerView(uname).setVisible(true);
                                    }
                                } else {
                                    if (age >= 60) {
                                        String sql3 = "UPDATE `medicine` SET `stock`=" + left + " WHERE brandname='" + orderedname + "'";
                                        String sql4 = "UPDATE `users` SET `money`=" + moneyLeftSenior + " WHERE username='" + uname + "'";
                                        String sql5 = "DELETE FROM `orders` WHERE id=" + order;
                                        stmt.addBatch(sql3);
                                        stmt.addBatch(sql4);
                                        stmt.addBatch(sql5);
                                        stmt.executeBatch();
                                        this.dispose();
                                        new customerView(uname).setVisible(true);

                                        JOptionPane.showMessageDialog(rootPane, "Paid Successfully!");
                                    } else {
                                        String sql3 = "UPDATE `medicine` SET `stock`=" + left + " WHERE brandname='" + orderedname + "'";
                                        String sql4 = "UPDATE `users` SET `money`=" + moneyLeftAdult + " WHERE username='" + uname + "'";
                                        String sql5 = "DELETE FROM `orders` WHERE id=" + order;
                                        stmt.addBatch(sql3);
                                        stmt.addBatch(sql4);
                                        stmt.addBatch(sql5);
                                        stmt.executeBatch();

                                        JOptionPane.showMessageDialog(rootPane, "Paid Successfully!");
                                        this.dispose();
                                        new customerView(uname).setVisible(true);
                                    }
                                }
                            }

                        } else {
                            // If amount is lesser than the user's money
                            
                            
                            System.out.println("nag run siya sa else");
                            if (qty > qty1) { // If the quantity ordered is greater than the stock
                                JOptionPane.showMessageDialog(rootPane, "Currently can't process order because insufficient of stock! We'll update it later!");

                            } else if (qty == qty1) { // If stock of the medicine is equal to ordered quantity
                                // Updating data in the tables here

                                String sql3 = "DELETE FROM `medicine` WHERE brandname='" + orderedname + "'";
                                String sql4 = "UPDATE `users` SET `money`=" + money + " WHERE username='" + uname + "'";
                                String sql5 = "DELETE FROM `orders` WHERE id=" + order;

                                stmt.addBatch(sql3);
                                stmt.addBatch(sql4);
                                stmt.addBatch(sql5);
                                stmt.executeBatch();
                                JOptionPane.showMessageDialog(rootPane, "Order is now paid!");
                                this.dispose();
                                new customerView(uname).setVisible(true);

                            } else {
                                if (left == 0) {
                                    if (age >= 60) {
                                        String sql3 = "DELETE FROM `medicine` WHERE brandname='" + orderedname + "'";
                                        String sql4 = "UPDATE `users` SET `money`=" + moneyLeftSenior + " WHERE username='" + uname + "'";
                                        String sql5 = "DELETE FROM `orders` WHERE id=" + order;
                                        stmt.addBatch(sql3);
                                        stmt.addBatch(sql4);
                                        stmt.addBatch(sql5);
                                        stmt.executeBatch();
                                        JOptionPane.showMessageDialog(rootPane, "Paid Successfully!");
                                        this.dispose();
                                        new customerView(uname).setVisible(true);
                                    } else {
                                        String sql3 = "DELETE FROM `medicine` WHERE brandname='" + orderedname + "'";
                                        String sql4 = "UPDATE `users` SET `money`=" + moneyLeftAdult + " WHERE username='" + uname + "'";
                                        String sql5 = "DELETE FROM `orders` WHERE id=" + order;
                                        stmt.addBatch(sql3);
                                        stmt.addBatch(sql4);
                                        stmt.addBatch(sql5);
                                        stmt.executeBatch();

                                        JOptionPane.showMessageDialog(null, "Paid Successfully!");
                                        this.dispose();
                                        new customerView(uname).setVisible(true);
                                    }
                                } else {

                                    if (age >= 60) {
                                        String sql3 = "UPDATE `medicine` SET `stock`=" + left + " WHERE brandname='" + orderedname + "'";
                                        String sql4 = "UPDATE `users` SET `money`=" + moneyLeftSenior + " WHERE username='" + uname + "'";
                                        String sql5 = "DELETE FROM `orders` WHERE id=" + order;
                                        stmt.addBatch(sql3);
                                        stmt.addBatch(sql4);
                                        stmt.addBatch(sql5);
                                        stmt.executeBatch();
                                        JOptionPane.showMessageDialog(rootPane, "Paid Successfully!");
                                        this.dispose();
                                        new customerView(uname).setVisible(true);

                                    } else {
                                        String sql3 = "UPDATE `medicine` SET `stock`=" + left + " WHERE brandname='" + orderedname + "'";
                                        String sql4 = "UPDATE `users` SET `money`=" + moneyLeftAdult + " WHERE username='" + uname + "'";
                                        String sql5 = "DELETE FROM `orders` WHERE id=" + order;
                                        stmt.addBatch(sql3);
                                        stmt.addBatch(sql4);
                                        stmt.addBatch(sql5);
                                        stmt.executeBatch();
                                        JOptionPane.showMessageDialog(rootPane, "Paid Successfully!");
                                        this.dispose();
                                        new customerView(uname).setVisible(true);
                                    }
                                }
                                JOptionPane.showMessageDialog(rootPane, "Order is now paid!");
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Medicine do not exist!");
                    }

                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Order ID do not exist!");
            }

        } catch (HeadlessException | ClassNotFoundException | SQLException e) {
            System.out.println(e.getCause());
            JOptionPane.showMessageDialog(rootPane, "Error connecting to database!");

        }

    }//GEN-LAST:event_payButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(payOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(payOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(payOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(payOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new payOrder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton canelButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField orderField;
    private javax.swing.JLabel orderFieldLabel;
    private javax.swing.JTable ordersTable;
    private javax.swing.JButton payButton;
    private javax.swing.JButton viewTable;
    // End of variables declaration//GEN-END:variables
}
